#include <Wire.h>
#define OLED_ADDR (0x3C) //OLED address 製品に記載の数値は7bitなので、8bitに変換して1bit右へずらした値(78>>3c)
  
byte ascii[][6]=
{
  // SPACE  20H
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  // !      21H
  0x00, 0x00, 0x4F, 0x00, 0x00, 0x00,
  // "      22H
  0x00, 0x07, 0x00, 0x07, 0x00, 0x00,
  // #      23H
  0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00,
  // $      24H
  0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00,
  // %      25H
  0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00,
  // &      26H
  0x36, 0x49, 0x55, 0x22, 0x50, 0x00,
  // '      27H
  0x00, 0x05, 0x03, 0x00, 0x00, 0x00,
  // (      28H
  0x00, 0x1C, 0x22, 0x41, 0x00, 0x00,
  // )      29H
  0x00, 0x41, 0x22, 0x1C, 0x00, 0x00,
  // *      2AH
  0x14, 0x08, 0x3E, 0x08, 0x14, 0x00,
  // +      2BH
  0x08, 0x08, 0x3E, 0x08, 0x08, 0x00,
  // ,      2CH
  0x00, 0x50, 0x30, 0x00, 0x00, 0x00,
  // -      2DH
  0x08, 0x08, 0x08, 0x08, 0x08, 0x00,
  // .      2EH
  0x00, 0x60, 0x60, 0x00, 0x00, 0x00,
  // /      2FH
  0x20, 0x10, 0x08, 0x04, 0x02, 0x00,
  // 0      30H
  0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00,
  // 1      31H
  0x00, 0x42, 0x7F, 0x40, 0x00, 0x00,
  // 2      32H
  0x42, 0x61, 0x51, 0x49, 0x46, 0x00,
  // 3      33H
  0x21, 0x41, 0x45, 0x4B, 0x31, 0x00,
  // 4      34H
  0x18, 0x14, 0x12, 0x7F, 0x10, 0x00,
  // 5      35H
  0x27, 0x45, 0x45, 0x45, 0x30, 0x00,
  // 6      36H
  0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00,
  // 7      37H
  0x01, 0x71, 0x09, 0x05, 0x03, 0x00,
  // 8      38H
  0x36, 0x49, 0x49, 0x49, 0x36, 0x00,
  // 9      39H
  0x06, 0x49, 0x49, 0x29, 0x1E, 0x00,
  // :      3AH
  0x00, 0x36, 0x36, 0x00, 0x00, 0x00,
  // ;      3BH
  0x00, 0x56, 0x36, 0x00, 0x00, 0x00,
  // <      3CH
  0x08, 0x14, 0x22, 0x41, 0x00, 0x00,
  // =      3DH
  0x14, 0x14, 0x14, 0x14, 0x14, 0x00,
  // >      3EH
  0x00, 0x41, 0x22, 0x14, 0x08, 0x00,
  // ?      3FH
  0x02, 0x01, 0x51, 0x09, 0x06, 0x00,
  // @      40H
  0x32, 0x49, 0x79, 0x41, 0x3E, 0x00,
  // A      41H
  0x7E, 0x11, 0x11, 0x11, 0x7E, 0x00,
  // B      42H
  0x7F, 0x49, 0x49, 0x49, 0x36, 0x00,
  // C      43H
  0x3E, 0x41, 0x41, 0x41, 0x22, 0x00,
  // D      44H
  0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00,
  // E      45H
  0x7F, 0x49, 0x49, 0x49, 0x41, 0x00,
  // F      46H
  0x7F, 0x09, 0x09, 0x09, 0x01, 0x00,
  // G      47H
  0x3E, 0x41, 0x49, 0x49, 0x7A, 0x00,
  // H      48H
  0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00,
  // I      49H
  0x00, 0x41, 0x7F, 0x41, 0x00, 0x00,
  // J      4AH
  0x20, 0x40, 0x41, 0x3F, 0x01, 0x00,
  // K      4BH
  0x7F, 0x08, 0x14, 0x22, 0x41, 0x00,
  // L      4CH
  0x7F, 0x40, 0x40, 0x40, 0x40, 0x00,
  // M      4DH
  0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00,
  // N      4EH
  0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00,
  // O      4FH
  0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00,
  // P      50H
  0x7F, 0x09, 0x09, 0x09, 0x06, 0x00,
  // Q      51H
  0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00,
  // R      52H
  0x7F, 0x09, 0x19, 0x29, 0x46, 0x00,
  // S      53H
  0x46, 0x49, 0x49, 0x49, 0x31, 0x00,
  // T      54H
  0x01, 0x01, 0x7F, 0x01, 0x01, 0x00,
  // U      55H
  0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00,
  // V      56H
  0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00,
  // W      57H
  0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00,
  // X      58H
  0x63, 0x14, 0x08, 0x14, 0x63, 0x00,
  // Y      59H
  0x07, 0x08, 0x70, 0x08, 0x07, 0x00,
  // Z      5AH
  0x61, 0x51, 0x49, 0x45, 0x43, 0x00,
  // [      5BH
  0x00, 0x7F, 0x41, 0x41, 0x00, 0x00,
  // \      5CH
  0x15, 0x16, 0x7C, 0x16, 0x15, 0x00,
  // ]      5DH
  0x00, 0x41, 0x41, 0x7F, 0x00, 0x00,
  // ^      5EH
  0x04, 0x02, 0x01, 0x02, 0x04, 0x00,
  // _      5FH
  0x40, 0x40, 0x40, 0x40, 0x40, 0x00,
  // `      60H
  0x00, 0x01, 0x02, 0x04, 0x00, 0x00,
  // a      61H
  0x20, 0x54, 0x54, 0x54, 0x78, 0x00,
  // b      62H
  0x7F, 0x50, 0x48, 0x48, 0x30, 0x00,
  // c      63H
  0x38, 0x44, 0x44, 0x44, 0x20, 0x00,
  // d      64H
  0x38, 0x44, 0x44, 0x48, 0x7F, 0x00,
  // e      65H
  0x38, 0x54, 0x54, 0x54, 0x18, 0x00,
  // f      66H
  0x08, 0x7E, 0x09, 0x01, 0x02, 0x00,
  // g      67H
  0x0C, 0x52, 0x52, 0x52, 0x3E, 0x00,
  // h      68H
  0x7F, 0x08, 0x04, 0x04, 0x78, 0x00,
  // i      69H
  0x00, 0x44, 0x7D, 0x40, 0x40, 0x00,
  // j      6AH
  0x20, 0x40, 0x44, 0x3D, 0x00, 0x00,
  // k      6BH
  0x7F, 0x10, 0x28, 0x44, 0x00, 0x00,
  // l      6CH
  0x00, 0x41, 0x7F, 0x40, 0x00, 0x00,
  // m      6DH
  0x7C, 0x04, 0x18, 0x04, 0x78, 0x00,
  // n      6EH
  0x7C, 0x08, 0x04, 0x04, 0x78, 0x00,
  // o      6FH
  0x38, 0x44, 0x44, 0x44, 0x38, 0x00,
  // p      70H
  0x7C, 0x14, 0x14, 0x14, 0x08, 0x00,
  // q      71H
  0x08, 0x14, 0x14, 0x18, 0x7C, 0x00,
  // r      72H
  0x7C, 0x08, 0x04, 0x04, 0x08, 0x00,
  // s      73H
  0x48, 0x54, 0x54, 0x54, 0x20, 0x00,
  // t      74H
  0x04, 0x3F, 0x44, 0x40, 0x20, 0x00,
  // u      75H
  0x3C, 0x40, 0x40, 0x30, 0x7C, 0x00,
  // v      76H
  0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00,
  // w      77H
  0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00,
  // x      78H
  0x44, 0x28, 0x10, 0x28, 0x44, 0x00,
  // y      79H
  0x0C, 0x50, 0x50, 0x50, 0x3C, 0x00,
  // z      7AH
  0x44, 0x64, 0x54, 0x4C, 0x44, 0x00,
  // {      7BH
  0x00, 0x08, 0x36, 0x41, 0x00, 0x00,
  // |      7CH
  0x00, 0x00, 0x7F, 0x00, 0x00, 0x00,
  // }      7DH
  0x00, 0x41, 0x36, 0x08, 0x00, 0x00,
  // ~      7FH
  0x02, 0x01, 0x03, 0x02, 0x01, 0x00,

};
  
void setup()
{
  Wire.begin();
  setup_i2c();
  Display_Black();
}
  
void loop()
{
  Display_Picture();
}
 
void setup_i2c()
{
  Wire.beginTransmission(OLED_ADDR);
  Wire.write(B00000000); //control byte, Co bit = 0 (continue), D/C# = 0 (command)
    Wire.write(0xAE); //display off
    Wire.write(0xA8); //Set Multiplex Ratio  0xA8, 0x3F
      Wire.write(B00111111); //64MUX
    Wire.write(0xD3); //Set Display Offset 0xD3, 0x00
      Wire.write(0x00);
    Wire.write(0x40); //Set Display Start Line 0x40
//    Wire.write(0xA0); //Set Segment re-map 0xA0/0xA1
    Wire.write(0xA1); //Set Segment re-map 0xA0/0xA1
//    Wire.write(0xC0); //Set COM Output Scan Direction 0xC0,/0xC8
    Wire.write(0xC8); //Set COM Output Scan Direction 0xC0,/0xC8
    Wire.write(0xDA); //Set COM Pins hardware configuration 0xDA, 0x02
      Wire.write(B00010010);
    Wire.write(0x81); //Set Contrast Control 0x81, 0x7F（明るさ設定）
      Wire.write(255); //0-255
    Wire.write(0xA4); //Disable Entire Display On（ディスプレイ全体ＯＮ）
    Wire.write(0xA6); //Set Normal Display 0xA6, Inverse display 0xA7
    Wire.write(0xD5); //Set Display Clock Divide Ratio/Oscillator Frequency 0xD5, 0x80
      Wire.write(B10000000);
    Wire.write(0x2E); //Deactivate scrollスクロール表示解除
    Wire.write(0x20); //Set Memory Addressing Mode
      Wire.write(0x10); //Page addressing mode
    Wire.write(0x21); //set Column Address
      Wire.write(0); //Column Start Address←水平開始位置はここで決める(0～127)
      Wire.write(127); //Column Stop Address　画面をフルに使う
    Wire.write(0x22); //Set Page Address
      Wire.write(0); //垂直開始位置（ページ）
      Wire.write(7); //垂直終了位置（ページ）
    Wire.write(0x8D); //Set Enable charge pump regulator 0x8D, 0x14
      Wire.write(0x14);
    Wire.write(0xAF); //Display On 0xAF
  Wire.endTransmission();
}
 
void Display_Black()
{
  byte i, j, k;
 
  for(i = 0; i < 8; i++)
  {//8ページ分塗りつぶす
    Wire.beginTransmission(OLED_ADDR);
      Wire.write(B10000000); //control byte, Co bit = 1 (One command only), D/C# = 0 (command)
      Wire.write(0xB0 | i); //set page start address←垂直開始位置はここで決める8bitで１ページ(B0～B7)
    Wire.endTransmission();
     
    for(j = 0; j < 16; j++)
    {//column = 8byte x 16 ←8バイト毎に水平に連続で16個表示
      Wire.beginTransmission(OLED_ADDR);
      Wire.write(B01000000); //control byte, Co bit = 0 (continue), D/C# = 1 (data)
      for(k = 0; k < 8; k++)
      { //なぜか一気に128列まで出力できなかったので、8byte毎にした
        Wire.write(0x00);
      }
      Wire.endTransmission();
    }
    yield();
  }
}
 
void Display_Picture(){
  byte i,j,k,l;
  byte on_off; //画面の白黒　塗り替え数値
  l = 0;
  for(on_off = 0; on_off < 2; on_off++)
  {
    for(i=0; i<8; i++)
    {
      Wire.beginTransmission(OLED_ADDR);
      Wire.write(B00000000); //control byte, Co bit = 0 (continue), D/C# = 0 (command)
      Wire.write(0xB0 | i); //set page start address←垂直開始位置はここで決める(B0～B7)
      Wire.write(0x21);//set column addres
      Wire.write(0x00 | 0);//start column addres←水平開始位置はここで決める(0～126)
      Wire.write(B01111111);//Column Stop Address　画面をフルに使う
      Wire.endTransmission();
      for(j=0; j<21; j++)
      {//column = 6byte x 28 ←6バイト毎に水平に連続で21個表示
        Wire.beginTransmission(OLED_ADDR);
        Wire.write(B01000000); //control byte, Co bit = 0 (continue), D/C# = 1 (data)
        if(on_off == 1)
        {
          for(k=0; k<6; k++)
          {
            Wire.write(0x00); //黒画面に塗り替え
          }
        }
        else
        {
          for(k=0; k<6; k++)
          {
            Wire.write(ascii[l][k]);
          }
          l++;
          l = l % 95;
        }
        Wire.endTransmission();
      }
    }
    if(on_off == 0)
    {
      delay(3000); //3秒ごとに画面を塗り替え
    }
    else
    {
      delay(1000); //1秒ごとに画面を塗り替え
    }
  }
}
